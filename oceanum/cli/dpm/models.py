# generated by datamodel-codegen:
#   filename:  https://dpm.oceanum.tech/api/openapi.json

from __future__ import annotations

from enum import Enum
from pathlib import Path
from typing import Any, Optional, Union
from uuid import UUID

from pydantic import (
    AwareDatetime,
    BaseModel,
    ConfigDict,
    EmailStr,
    Field,
    RootModel,
    SecretStr,
)


class OrgSchema(BaseModel):
    name: str = Field(..., max_length=150, title='Name')


class SecretData(RootModel[Optional[dict[str, SecretStr]]]):
    root: Optional[dict[str, SecretStr]] = None


class SecretSpec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        ...,
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Resource Name',
    )
    description: Optional[str] = Field(default=None, title='Resource Description')
    data: Union[SecretData, dict[str, Any]] = Field(
        ...,
        description="The Secret's data, a dictionary of key-value pairs, values will be converted to string",
        title='Secret Data',
    )


class UserResourceSchema(BaseModel):
    spec: SecretSpec
    name: str = Field(..., max_length=255, title='Name')
    resource_type: str = Field(..., max_length=20, title='Resource Type')
    created_at: AwareDatetime = Field(..., title='Created At')
    updated_at: AwareDatetime = Field(..., title='Updated At')


class Email(RootModel[str]):
    root: str = Field(..., max_length=254, title='Email Address')


class Token(RootModel[str]):
    root: str = Field(
        ...,
        description="The user's DPM API authentication token",
        max_length=64,
        title='Token',
    )


class UserSchema(BaseModel):
    current_org: Optional[OrgSchema] = None
    resources: list[UserResourceSchema] = Field(..., title='Resources')
    username: str = Field(
        ...,
        description='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
        max_length=150,
        title='Username',
    )
    email: Optional[Email] = Field(default=None, title='Email Address')
    token: Optional[Token] = Field(
        default=None,
        description="The user's DPM API authentication token",
        title='Token',
    )


class ValidationErrorDetail(BaseModel):
    loc: list[str] = Field(..., title='Loc')
    msg: str = Field(..., title='Msg')
    type: str = Field(..., title='Type')


class Artifact(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        ..., description='The name of the Task Artifact', title='Artifact Name'
    )
    required: Optional[bool] = Field(
        default=None,
        description="Make Artifacts optional, if Artifacts doesn't generate or exist",
        title='Optional Artifact',
    )
    path: Optional[str] = Field(
        default=None,
        description='Path is the container path to the artifact',
        title='Artifact Path',
    )
    env: Optional[str] = Field(
        default=None,
        description='Env is the environment variable name which value is the path to the artifact',
        title='Artifact Environment Variable',
    )


class Registry(RootModel[str]):
    root: str = Field(
        ...,
        description='The Docker Registry URL domain for the build, no schema or path, only domain',
        pattern='^([A-Za-z0-9]([A-Za-z0-9-]{1,63}[A-Za-z0-9]\\.)+)[A-Za-z]{2,6}$',
        title='Docker Registry domain URL',
    )


class ImageRef(RootModel[str]):
    root: str = Field(
        ...,
        description='The Image reference name from the list of Image resources',
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Image Reference',
    )


class SecretRef(RootModel[str]):
    root: str = Field(
        ...,
        description='The Secret reference name from the list of Secret resources',
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Secret Reference',
    )


class UserSecretRef(SecretRef):
    pass


class BuildCredentials(BaseModel):
    registry: Optional[Registry] = Field(
        default=None,
        description='The Docker Registry URL domain for the build, no schema or path, only domain',
        title='Docker Registry domain URL',
    )
    username: Optional[str] = Field(
        default=None, description='The username for the registry', title='Username'
    )
    password: Optional[SecretStr] = Field(
        default=None, description='The password for the registry', title='Password'
    )
    image_ref: Optional[ImageRef] = Field(
        default=None,
        alias='imageRef',
        description='The image reference from the list of project images, to be used as the base-image for this build, cannot be used with baseImage field.',
        title='Image Reference',
    )
    secret_ref: Optional[SecretRef] = Field(
        default=None,
        alias='secretRef',
        description="A secret reference from the list of project secrets, with 'registry', 'username', 'password' keys set, to be used as Docker credentials for pulling the base-image",
        title='Secret Reference',
    )
    user_secret_ref: Optional[UserSecretRef] = Field(
        default=None,
        alias='userSecretRef',
        description="A user secret reference from the list of user secrets, with 'registry', 'username', 'password' keys set, to be used as Docker credentials for pulling the base-image",
        title='User Secret Reference',
    )


class SourceRef(RootModel[str]):
    root: str = Field(
        ...,
        description='The source repository reference from the list of connected repositories',
        max_length=255,
        min_length=1,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Source Repository Reference',
    )


class BuildRef(RootModel[str]):
    root: str = Field(
        ...,
        description='The Build name reference from the list of Build resources',
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Build Reference',
    )


class ConfigMapRefEnvVar(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        ...,
        description="The ConfigMap's Environment Variable Name",
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='ConfigMap Environment Variable',
    )
    key: str = Field(
        ...,
        description="The ConfigMap's data key to use as the value of the Environment Variable",
        title="ConfigMap's Data Key",
    )


class ConfigMapSpec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        ...,
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Resource Name',
    )
    description: Optional[str] = Field(default=None, title='Resource Description')
    data: dict[str, Any] = Field(
        ...,
        description="The ConfigMap's data, a dictionary of key-value pairs, values will be converted to string",
        title='ConfigMap Data',
    )


class ConfigmapParameterRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        ...,
        description='The ConfigMap reference to mount in the container',
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='ConfigMap Reference',
    )
    key: str = Field(
        ...,
        description='The ConfigMap key to use as the value of the Environment Variable',
        title='ConfigMap Key',
    )


class ContinueOn(BaseModel):
    """
    ContinueOn defines if a pipeline should continue even if a task or step fails/errors. It can be specified if the workflow should continue when the pod errors, fails or both.
    """

    model_config = ConfigDict(
        extra='forbid',
    )
    error: Optional[bool] = Field(default=None, title='Error')
    failed: Optional[bool] = Field(default=None, title='Failed')


class SecretRef1(RootModel[str]):
    root: str = Field(
        ...,
        description='A reference to the Secret containing the SSL/TLS certificate and private cert and key for the Custom Domain, the Secret expect data with 2 keys `cert` and `key`.',
        max_length=255,
        title='Secret Reference',
    )


class CustomDomainSpec(BaseModel):
    name: str = Field(
        ...,
        description='A Fully-Qualified Domain Name (case-insensitive), using only a-z, 0-9 and - (hifen) characters.',
        max_length=255,
        pattern='^([A-Za-z0-9][A-Za-z0-9-]{0,62}[A-Za-z0-9]\\.)+[A-Za-z]{2,63}\\.?$',
        title='Domain Name',
    )
    secret_ref: Optional[SecretRef1] = Field(
        default=None,
        alias='secretRef',
        description='A reference to the Secret containing the SSL/TLS certificate and private cert and key for the Custom Domain, the Secret expect data with 2 keys `cert` and `key`.',
        title='Secret Reference',
    )
    tls_cert: Optional[SecretStr] = Field(
        default=None,
        alias='tlsCert',
        description="The Custom Domain's TLS Certificate",
        title='TLS Certificate',
    )
    tls_key: Optional[SecretStr] = Field(
        default=None,
        alias='tlsKey',
        description="The Custom Domain's TLS Key",
        title='TLS Key',
    )


class Frequency(Enum):
    """
    The frequency occurrence of each DAG cycle, e.g. @hourly, @daily, @weekly, @monthly, @yearly
    """

    field_minutely = '@minutely'
    field_hourly = '@hourly'
    field_daily = '@daily'
    field_weekly = '@weekly'
    field_monthly = '@monthly'
    field_yearly = '@yearly'


class DockerImageURL(RootModel[str]):
    root: str = Field(..., title='DockerImageURL')


class Medium(Enum):
    """
    What type of storage medium should back this directory. The default is to use the node's default medium (disk/SSD). Must be an empty string (default) or 'Memory'.
    """

    field_ = ''
    memory = 'Memory'


class GitHubSourceRepositorySpec(BaseModel):
    base_url: str = Field(
        default='https://github.com',
        alias='baseUrl',
        description='The base URL for GitHub',
        title='GitHub Base URL',
    )
    username: str = Field(
        ...,
        description='The GitHub repository owner or username',
        max_length=255,
        title='GitHub Repository Owner/Username',
    )
    repository: str = Field(
        ..., title='A GitHub Repository Name with Owner/repo-name format'
    )


class GitlabSourceRepositorySpec(BaseModel):
    base_url: str = Field(
        default='https://gitlab.com',
        alias='baseUrl',
        description='The base URL for GitLab',
        title='GitLab Base URL',
    )
    username: str = Field(
        ...,
        description='The GitLab username to use for authentication',
        max_length=255,
        title='GitLab Username',
    )
    project: str = Field(
        ...,
        title='A GitLab Project path such as "my-org/namespace/project" or a projectID number (as string)',
    )


class HTTPHeader(BaseModel):
    """
    HTTPHeader describes a custom header to be used in HTTP probes
    """

    name: str = Field(
        ...,
        description='The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.',
        title='Name',
    )
    value: str = Field(..., description='The header field value', title='Value')


class SecretRef2(SecretRef):
    pass


class ImageSpec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        ...,
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Resource Name',
    )
    description: Optional[str] = Field(default=None, title='Resource Description')
    image: DockerImageURL = Field(
        ...,
        description='Image reference from project Images or a public or a private image URL, private images requires username and password or secret to be set',
        title='Image reference or URL',
    )
    username: Optional[SecretStr] = Field(
        default=None,
        description="User's username used for authentication to the registry",
        title='Image Username',
    )
    password: Optional[SecretStr] = Field(
        default=None,
        description="User's password used for authentication to the registry",
        title='Image Password',
    )
    email: Optional[EmailStr] = Field(
        default=None,
        description="User's email used for authentication to the registry",
        title='Image Email',
    )
    secret_ref: Optional[SecretRef2] = Field(
        default=None,
        alias='secretRef',
        description='Image Secret Reference from project Secrets containing username, password and email key:value pairs',
        title='Image Secret Reference',
    )


class InterCycleDependency(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        ...,
        description='Name is the name of the dependency',
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Resource Name',
    )
    look_back: int = Field(
        default=0,
        alias='lookBack',
        description='LookBack is the number of cycles to look back for the dependency, defaults to 0 which translates to depend at the same cycle',
        gt=-1,
        title='Look Back',
    )


class KeyToPath(BaseModel):
    key: str = Field(
        ...,
        description="The Secret's data key to mount as a file inside the specified path",
        title='Secret Data Key',
    )
    mode: Optional[int] = Field(
        default=None,
        description='mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
        title='File Mode',
    )
    path: str = Field(
        ...,
        description="path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
        pattern='^[a-zA-Z0-9][a-zA-Z0-9_/.-]+$',
        title="Secret's key item mount path",
    )


class TaskRef(RootModel[str]):
    root: str = Field(
        ...,
        description='TaskRef is the name of the task to execute',
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Resource Name',
    )


class PipelineRef(RootModel[str]):
    root: str = Field(
        ...,
        description='PipelineRef is the name of the pipeline to execute',
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Resource Name',
    )


class Phase(Enum):
    pending = 'Pending'
    running = 'Running'
    succeeded = 'Succeeded'
    skipped = 'Skipped'
    failed = 'Failed'
    error = 'Error'
    omitted = 'Omitted'


class Schedule(Enum):
    """
    Schedule is a schedule to run the Workflow in Cron format
    """

    field_minutely = '@minutely'
    field_hourly = '@hourly'
    field_daily = '@daily'
    field_weekly = '@weekly'
    field_monthly = '@monthly'
    field_yearly = '@yearly'


class Schedule1(RootModel[str]):
    root: str = Field(
        ...,
        description='CronEvery is a time duration representation as a string e.g. @every 5m, @every 5h, @every 5d, @every 1h30m, @every 1d12h30m',
        pattern='@every\\s(?P<value>\\d+)(?P<unit>[dhms])',
        title='Schedule',
    )


class Schedule2(RootModel[str]):
    root: str = Field(
        ...,
        description='A Cron like statement. See ',
        pattern='((((\\d+,)+\\d+|(\\d+(\\/|-)\\d+)|\\d+|\\*) ?){5})',
        title='Schedule',
    )


class Delay(RootModel[str]):
    root: str = Field(
        ...,
        description='A time duration representation as a string e.g. 5m, 5h, 5d, 1h30m, 1d12h30m',
        pattern='(?P<value>\\d+)(?P<unit>[dhms])',
        title='Delay',
    )


class PipelineCronTrigger(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    schedule: Union[Schedule, Schedule1, Schedule2] = Field(
        ...,
        description='Schedule is a schedule to run the Workflow in Cron format',
        title='Schedule',
    )
    delay: Optional[Delay] = Field(
        default=None,
        description='Delay is a time difference from when this pipeline should start to be executed in relation to scheduled time. e.g. 30m, 1h, 1d',
        title='Delay',
    )
    failed_jobs_history_limit: Optional[int] = Field(
        default=3,
        alias='failedJobsHistoryLimit',
        description='FailedJobsHistoryLimit is the number of failed pipelines to be kept at a time',
        title='Failedjobshistorylimit',
    )
    successful_jobs_history_limit: Optional[int] = Field(
        default=3,
        alias='successfulJobsHistoryLimit',
        description='SuccessfulJobsHistoryLimit is the number of successful jobs to be kept at a time',
        title='Successfuljobshistorylimit',
    )
    suspend: Optional[bool] = Field(
        default=None,
        description='Suspend is a flag that will stop new CronWorkflows from running if set to true',
        title='Suspend',
    )
    timezone: str = Field(
        default='UTC',
        description='Timezone is the timezone against which the cron schedule will be calculated, e.g. "Asia/Tokyo". Default is UTC.',
        title='Timezone',
    )


class Phase1(Enum):
    """
    The pipeline phase to trigger the event, e.g. Pending, Running, Succeeded, Failed, Error, Skipped or Omitted
    """

    pending = 'Pending'
    running = 'Running'
    succeeded = 'Succeeded'
    skipped = 'Skipped'
    failed = 'Failed'
    error = 'Error'
    omitted = 'Omitted'


class PipelineTriggerParameter(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        ...,
        description='Name is the name of the parameter',
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Resource Name',
    )


class PipelineVolume(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        ...,
        description='Name of the volume',
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Resource Name',
    )
    size: Optional[str] = Field(
        default=None, description='Size of the volume in Quantity format', title='Size'
    )
    path: Optional[str] = Field(
        default=None,
        description='Path is the container path to mount the volume, by default the volume will be mounted to /mnt/<name>',
        title='Path',
    )


class UserRef(RootModel[str]):
    root: str = Field(
        ...,
        description='The User reference name from the list of User resources',
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title="User's Reference",
    )


class Quantity(RootModel[Union[str, int, float]]):
    root: Union[str, int, float] = Field(..., title='Quantity')


class Family(Enum):
    """
    The resource family of the resource request, if not provided only cpu and memory will be used for scheduling
    """

    e2 = 'e2'
    n2 = 'n2'
    n2d = 'n2d'
    c3 = 'c3'
    c3d = 'c3d'


class ResourceRequests(BaseModel):
    cpu: Optional[Quantity] = Field(
        default=None,
        description='The quantity of CPU resources, if not provided a system default or parent attribute will be applied',
        title='CPU Quantity',
    )
    memory: Optional[Quantity] = Field(
        default=None,
        description='The quantity of Memory resources, if not provided a system default or parent attribute will be applied',
        title='Memory Quantity',
    )
    storage: Optional[Quantity] = Field(
        default=None,
        description='The quantity of local disk storage required, if not provided, a system default or parent attribute will be applied.',
        title='Ephemeral Storage Quantity',
    )
    family: Optional[Family] = Field(
        default=None,
        description='The resource family of the resource request, if not provided only cpu and memory will be used for scheduling',
        title='Machine Family',
    )
    on_demand: bool = Field(
        default=False,
        alias='onDemand',
        description='If the resource request can be scheduled on an on-demand instance. Default is False.',
        title='On-Demand Instance',
    )


class MaxDuration(RootModel[str]):
    root: str = Field(
        ...,
        description='A time duration representation as a string e.g. 5m, 5h, 5d, 1h30m, 1d12h30m',
        pattern='(?P<value>\\d+)(?P<unit>[dhms])',
        title='Maxduration',
    )


class RetryBackoff(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    duration: str = Field(
        ...,
        description='Duration is the amount of time to wait before retrying the container. Minimum value is 1s',
        pattern='(?P<value>\\d+)(?P<unit>[dhms])',
        title='Duration',
    )
    factor: int = Field(
        default=1,
        description='Factor is the amount to multiply the duration by on each retry.',
        gt=1,
        title='Factor',
    )
    max_duration: Optional[MaxDuration] = Field(
        default=None,
        alias='maxDuration',
        description='MaxDuration is the maximum amount of time allowed for retrying the container. Minimum value is 1s',
        title='Maxduration',
    )


class RetryStrategy(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    node_anti_affinity: Optional[bool] = Field(
        default=None,
        alias='nodeAntiAffinity',
        description='NodeAntiAffinity is the preference to avoid retrying a task on the same node.',
        title='Nodeantiaffinity',
    )
    limit: int = Field(
        default=0,
        description='Limit is the maximum number of retry attempts when retrying a container. It does not include the original container; the maximum number of total attempts will be `limit + 1`.',
        gt=0,
        title='Limit',
    )
    backoff: Optional[RetryBackoff] = Field(
        default=None,
        description='Backoff is the amount of time to wait before retrying the container. Minimum value is 1ms',
    )


class SecretKeyRef(BaseModel):
    name: str = Field(
        ...,
        description="The Secret's name to use as source of the Environment Variable value",
        max_length=63,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Secret Name',
    )
    key: str = Field(
        ...,
        description="The Secret's data key to use as the value of the Environment Variable",
        title="Secret's Data Key",
    )


class SecretRefMounted(BaseModel):
    name: str = Field(
        ...,
        description='The Secret reference name from the list of Secret resources',
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Secret Reference Name',
    )
    keys: Optional[list[KeyToPath]] = Field(
        default=None,
        description="List of Secret's data keys to mount as files inside a folder represented by path",
        title="Secret's Data Keys",
    )
    path: Optional[str] = Field(
        default=None,
        description="Mount each of the secret's data keys or the ones defined in 'keys' as files inside the specified path",
        pattern='^[/a-zA-Z0-9][a-zA-Z0-9_/.-]+$',
        title="Secret's Mount Path",
    )


class Port(RootModel[int]):
    root: int = Field(
        ...,
        description="The Service's Health-Check Port, default's to ServicePort",
        ge=0,
        le=65535,
        title='Health Check Port',
    )


class ServiceHealthCheck(BaseModel):
    path: str = Field(
        ...,
        description="The Service's Health-Check Path",
        max_length=256,
        title='Health Check Path',
    )
    port: Optional[Port] = Field(
        default=None,
        description="The Service's Health-Check Port, default's to ServicePort",
        title='Health Check Port',
    )
    headers: Optional[list[HTTPHeader]] = Field(
        default=None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
        title='Headers',
    )


class DisplayName(RootModel[str]):
    root: str = Field(
        ...,
        description="The Service's Route human readable name to be displayed in Oceanum.io Apps Dashboard",
        max_length=256,
        title='Display Name',
    )


class Description(RootModel[str]):
    root: str = Field(
        ...,
        description="The Service's Route Description to be displayed in Oceanum.io Apps Dashboard, if not provided fallback to Service's Description",
        max_length=255,
        title='Description',
    )


class ServiceRouteSpec(BaseModel):
    display_name: Optional[DisplayName] = Field(
        default=None,
        alias='displayName',
        description="The Service's Route human readable name to be displayed in Oceanum.io Apps Dashboard",
        title='Display Name',
    )
    description: Optional[Description] = Field(
        default=None,
        description="The Service's Route Description to be displayed in Oceanum.io Apps Dashboard, if not provided fallback to Service's Description",
        title='Description',
    )
    publish_app: bool = Field(
        default=False,
        alias='publishApp',
        description="Publish the Service's Route in Oceanum.io Dashboard as an App",
        title='Publish',
    )
    custom_domains: Optional[list[CustomDomainSpec]] = Field(
        default=None,
        alias='customDomains',
        description="The Service's Route Domains",
        title='Custom Domains',
    )
    open_access: bool = Field(
        default=False,
        alias='openAccess',
        description="Open Access to the Service's Route, no Authentication or permission required",
        title='Open Access',
    )


class SourceRefParams(BaseModel):
    name: str = Field(
        ...,
        description='The name of the Source Repository',
        max_length=255,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Source Repository Name',
    )
    repo_ref: Optional[str] = Field(
        default=None,
        alias='repoRef',
        description='The branch to use for cloning the Source Repository and monitor for Git push-events, can be overwritten at stage level, defaults to the Source Repository default branch',
        title='Source Repository Reference Branch',
    )
    tag: Optional[str] = Field(
        default=None,
        description='The tag to use for cloning the Source Repository and monitor for Git push-events, can be overwritten at stage level',
        title='Source Repository Reference Tag',
    )


class SourceRepositorySpec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        ...,
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Resource Name',
    )
    description: Optional[str] = Field(default=None, title='Resource Description')
    github: Optional[GitHubSourceRepositorySpec] = Field(
        default=None,
        description='A GitHub repository to use as the source repository',
        title='GitHub Source Repository',
    )
    gitlab: Optional[GitlabSourceRepositorySpec] = Field(
        default=None,
        description='A GitLab repository to use as the source repository',
        title='GitLab Source Repository',
    )
    token: Optional[SecretStr] = Field(
        default=None,
        description='A token to use for authentication with the source repository',
        title='Source Repository Token',
    )
    default_branch: str = Field(
        default='main',
        description='The default branch to use for the source repository',
        max_length=24,
        title='Default Branch',
    )
    secret_ref: Optional[Union[SecretRef2, SecretKeyRef]] = Field(
        default=None,
        alias='secretRef',
        description="The name of a Secret containing a 'token' data key for the source repository or a SecretKeyRef with name and key.",
        title='Source Repository Secret Reference',
    )
    user_secret_ref: Optional[Union[UserSecretRef, SecretKeyRef]] = Field(
        default=None,
        alias='userSecretRef',
        description="The name of a Secret containing a 'token' data key for the repository user or a SecretKeyRef with name and key.",
        title='User Secret Reference',
    )


class StageBuildStatus(BaseModel):
    name: str = Field(
        ..., description='The name of the build in the spec file', title='Build name'
    )
    image_digest: str = Field(
        ...,
        alias='imageDigest',
        description='The last image digest used to build this stage',
        title='Last Image Digest',
    )
    git_repo_ref: Optional[str] = Field(
        default=None,
        alias='gitRepoRef',
        description='The source repository reference that triggered this update if has a sourceRef',
        title='Source Repository Reference',
    )
    commit_sha: Optional[str] = Field(
        default=None,
        alias='commitSHA',
        description='The source repository commit SHA reference that triggered this update if has a sourceRef',
        title='Source Commit Reference',
    )
    updated_at: Optional[AwareDatetime] = Field(
        default=None,
        alias='updatedAt',
        description='The time this push event was received if has a sourceRef',
        title='Source Commit Time',
    )


class Pipelines(RootModel[str]):
    root: str = Field(
        ...,
        description='The Pipeline reference name from the list of Pipeline resources',
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Pipeline Reference',
    )


class Tasks(RootModel[str]):
    root: str = Field(
        ...,
        description='The Task reference name from the list of Task resources',
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Task Reference',
    )


class Services(RootModel[str]):
    root: str = Field(
        ...,
        description='The Service reference name from the list of Service resources',
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Service Reference',
    )


class Status(Enum):
    """
    The current state of the stage
    """

    created = 'created'
    updating = 'updating'
    healthy = 'healthy'
    degraded = 'degraded'
    error = 'error'
    deactivated = 'deactivated'


class StageSyncStatus(BaseModel):
    status: Status = Field(
        ..., description='The current state of the stage', title='Stage Status'
    )
    error_message: Optional[str] = Field(
        default=None,
        alias='errorMessage',
        description='The last error message if the stage is in error state',
        title='Error Message',
    )
    updated_at: Optional[AwareDatetime] = Field(
        default=None,
        alias='updatedAt',
        description='Last time this stage was synced from source or image repository',
        title='Last Sync Time',
    )


class Branch(RootModel[str]):
    root: str = Field(
        ...,
        description='Source repository branch to monitor for changes, only commits to this branch will trigger an update for this deployment stage. Accepts wildcards for example',
        max_length=32,
        title='Source Repository Branch',
    )


class StageTrackSpec(BaseModel):
    branch: Optional[Branch] = Field(
        default=None,
        description='Source repository branch to monitor for changes, only commits to this branch will trigger an update for this deployment stage. Accepts wildcards for example',
        title='Source Repository Branch',
    )
    tag: Optional[str] = Field(
        default=None,
        description='Source repository tag Regular Expression to monitor for changes, triggering an update for this deployment stage and fixing each respective build image tag to the tag value.',
        title='Image or Source Repository Tag',
    )


class StepRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        ...,
        description='Name is the name of a previous step',
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Resource Name',
    )
    parameter_ref: Optional[str] = Field(
        default=None,
        alias='parameterRef',
        description='Parameter is the name of the output parameter from a previous step',
        title='Parameterref',
    )
    artifact_ref: Optional[str] = Field(
        default=None,
        alias='artifactRef',
        description='ArtifactName is the name of the output artifact from a previous step template',
        title='Artifactref',
    )


class TaskParameter(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        ..., description='The name of the Task Parameter', title='Parameter Name'
    )
    value: Optional[str] = Field(
        default=None,
        description='Default value to use for an input/output parameter if a value was not supplied as Arguments',
        title='Parameter Value',
    )
    configmap_ref: Optional[ConfigmapParameterRef] = Field(
        default=None,
        alias='configmapRef',
        description='ConfigMapRef is the name of the configmap that contains the parameter value',
        title='Value from ConfigMap Reference',
    )
    description: Optional[str] = Field(
        default=None,
        description='Description is the parameter description',
        title='Parameter Description',
    )
    env: Optional[str] = Field(
        default=None,
        description='Env is the environment variable name that this parameter can be accessed by inside the container',
        title='Parameter Environment Variable',
    )
    path: Optional[str] = Field(
        default=None,
        description='Path in the container where the parameter value is read from',
        title='Parameter Path',
    )


class ImageDigest(RootModel[str]):
    root: str = Field(..., max_length=255, title='Image Digest')


class SourceRef1(RootModel[str]):
    root: str = Field(..., max_length=255, title='Source Ref')


class CommitSha(RootModel[str]):
    root: str = Field(..., max_length=255, title='Commit Sha')


class BuildSchema(BaseModel):
    stage: Optional[str] = Field(..., title='Stage')
    id: Optional[int] = Field(default=None, title='ID')
    name: str = Field(..., max_length=255, title='Name')
    project_id: int = Field(..., title='Project')
    status: str = Field(default='pending', max_length=20, title='Status')
    workflow_ref: str = Field(..., max_length=255, title='Workflow Ref')
    image_digest: Optional[ImageDigest] = Field(default=None, title='Image Digest')
    source_ref: Optional[SourceRef1] = Field(default=None, title='Source Ref')
    commit_sha: Optional[CommitSha] = Field(default=None, title='Commit Sha')
    updated_at: AwareDatetime = Field(..., title='Updated At')


class RouteSchema(BaseModel):
    org: str = Field(..., title='Org')
    username: str = Field(..., title='Username')
    project: str = Field(..., title='Project')
    thumbnail: Optional[str] = Field(default=None, title='Thumbnail')
    url: Optional[str] = Field(default=None, title='Url')
    custom_domains: list[str] = Field(default=[], title='Custom Domains')
    stage: Optional[str] = Field(default=None, title='Stage')
    name: str = Field(
        ...,
        description='A unique route address for the Service (read-only)',
        max_length=255,
        title='Name',
    )
    display_name: str = Field(
        ...,
        description='A display name for the Service',
        max_length=255,
        title='Display Name',
    )
    created_at: AwareDatetime = Field(..., title='Created At')
    description: str = Field(
        default='',
        description='A description of the Service or App',
        title='Description',
    )
    publish_app: bool = Field(
        default=False,
        description='Whether to publish this Service Route as a an App in Oceanum.io Apps site',
        title='Publish App',
    )
    status: str = Field(
        default='pending',
        description='The last known status of the route',
        max_length=20,
        title='Status',
    )
    message: str = Field(
        default='',
        description='A status message, e.g. the error message',
        title='Message',
    )
    open_access: bool = Field(
        default=False,
        description='Whether the access to this App or Service is open to the public to view',
        title='Open Access',
    )


class StageSchema(BaseModel):
    id: Optional[int] = Field(default=None, title='ID')
    name: str = Field(..., max_length=255, title='Name')
    project_id: int = Field(..., title='Project')
    error_message: str = Field(default='', title='Error Message')
    status: str = Field(default='created', max_length=20, title='Status')
    updated_at: AwareDatetime = Field(..., title='Updated At')


class ProjectFilterSchema(BaseModel):
    org: Optional[str] = Field(
        default=None, description='Filter by org name', title='Org'
    )
    user: Optional[str] = Field(
        default=None, description='Filter by user email', title='User'
    )
    search: Optional[str] = Field(
        default=None,
        description='Filter by name or description contains (case-insensitive)',
        title='Search',
    )
    status: Optional[str] = Field(
        default=None, description='Filter by project status', title='Status'
    )


class GetProjectFilterSchema(BaseModel):
    org: Optional[str] = Field(
        default=None, description='Filter by org name', title='Org'
    )
    user: Optional[str] = Field(
        default=None, description='Filter by user email', title='User'
    )


class Op(Enum):
    """
    The operation to perform
    """

    add = 'add'
    replace = 'replace'
    remove = 'remove'


class JSONPatchOpSchema(BaseModel):
    op: Op = Field(..., description='The operation to perform', title='Operation')
    path: str = Field(
        ...,
        description='The path to the value to add, remove or replace',
        examples=['/resources/stages/0/name', '/resources/services/0/env/0/value'],
        title='JSON Path',
    )
    value: Optional[Union[str, dict[str, Any], list, int, float, bool]] = Field(
        default=None,
        description='The value to add or replace, ignored for remove operations',
        examples=['value', 1, 1.0, True, None, {'key': 'value'}, ['value1', 'value2']],
        title='Value',
    )


class RouteFilterSchema(BaseModel):
    search: Optional[str] = Field(
        default=None,
        description='Filter by name or display name contains (case-insensitive)',
        title='Search',
    )
    org: Optional[str] = Field(
        default=None, description='Filter by org name', title='Org'
    )
    user: Optional[str] = Field(
        default=None, description='Filter by owner email', title='User'
    )
    project: Optional[str] = Field(
        default=None,
        description='Filter by project name (case-insensitive)',
        title='Project',
    )
    stage: Optional[str] = Field(
        default=None, description='Filter by stage name', title='Stage'
    )
    status: Optional[str] = Field(
        default=None, description='Filter by route status', title='Status'
    )
    open_access: Optional[bool] = Field(
        default=None, description='Filter by open access status', title='Open Access'
    )
    publish_app: Optional[bool] = Field(
        default=None, description='Filter by publish app status', title='Publish App'
    )


class RouteThumbnailSchema(BaseModel):
    url: str = Field(..., description='The URL of the thumbnail', title='URL')
    name: str = Field(..., description='The file name of the thumbnail', title='Name')
    size: int = Field(
        ..., description='The size of the thumbnail in bytes', title='Size'
    )


class ErrorResponse(BaseModel):
    detail: Optional[Union[list[ValidationErrorDetail], dict[str, Any], str]] = Field(
        default=None, title='Detail'
    )


class ConfigMapRefMounted(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        ...,
        description='The ConfigMap reference name from the list of ConfigMap resources',
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='ConfigMap Reference Name',
    )
    keys: Optional[list[KeyToPath]] = Field(
        default=None,
        description="List of ConfigMap's data keys to mount as files inside a folder represented by path",
        title="ConfigMap's Data Keys",
    )
    path: str = Field(
        ...,
        description="Mount each of the secret's data keys or the ones defined in 'keys' as files inside the specified path",
        pattern='^[/a-zA-Z0-9][a-zA-Z0-9_/.-]+$',
        title="ConfigMap's Mount Path",
    )


class EmptyDirVolumeSource(BaseModel):
    """
    Represents an empty directory for a Container. Empty directory volumes support ownership management and SELinux relabeling.
    """

    model_config = ConfigDict(
        extra='forbid',
    )
    medium: Optional[Medium] = Field(
        default=None,
        description="What type of storage medium should back this directory. The default is to use the node's default medium (disk/SSD). Must be an empty string (default) or 'Memory'.",
        title='Medium',
    )
    size_limit: Optional[Quantity] = Field(
        default=None,
        alias='sizeLimit',
        description='sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined.',
    )


class EnvVarValue(BaseModel):
    """
    Represents an environment variable present in a Container.
    """

    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        ...,
        description='Name of the environment variable. Must be a C_IDENTIFIER.',
        title='Environment Variable Name',
    )
    value: Optional[str] = Field(
        default=None,
        description='Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".',
        title='Environment Variable Value',
    )
    secret_ref: Optional[SecretKeyRef] = Field(
        default=None,
        alias='secretRef',
        description='The secret reference to mount in the container',
        title='Secret Reference',
    )
    user_secret_ref: Optional[SecretKeyRef] = Field(
        default=None,
        alias='userSecretRef',
        description="The User's Secret reference to mount in the container",
        title='User Secret Reference',
    )
    configmap_ref: Optional[ConfigMapRefEnvVar] = Field(
        default=None,
        alias='configmapRef',
        description='The ConfigMap reference to mount in the container',
        title='ConfigMap Reference',
    )


class PipelineArguments(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    parameters: Optional[list[TaskParameter]] = Field(
        default=None,
        description='Parameters declares default parameters passed to all tasks, which can be overridden by individual tasks or during pipeline execution',
        title='Parameters',
    )


class PipelinePhaseEventSource(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    pipeline_ref: str = Field(
        ...,
        alias='pipelineRef',
        description='Trigger this pipeline when other pipeline from same project is complete',
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Pipeline Reference',
    )
    phase: Phase1 = Field(
        default='Succeeded',
        description='The pipeline phase to trigger the event, e.g. Pending, Running, Succeeded, Failed, Error, Skipped or Omitted',
        title='Pipeline Phase',
    )
    parameters: Optional[list[PipelineTriggerParameter]] = Field(
        default=None,
        description='Propagate values from the dependency pipeline parameters into the triggered pipeline parameters values',
        title='Pipeline Trigger Parameters',
    )


class PipelineTaskArtifact(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        ...,
        description='Name is the name of the input artifact',
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Resource Name',
    )
    step_ref: Optional[StepRef] = Field(
        default=None,
        alias='stepRef',
        description='Step is the name of a previous step that produces the artifact',
    )
    optional: Optional[bool] = Field(
        default=None,
        description="Make Artifacts optional, if Artifacts doesn't generate or exist",
        title='Optional',
    )
    path: Optional[str] = Field(
        default=None,
        description='Path is the container path to the artifact',
        title='Path',
    )
    sub_path: Optional[str] = Field(
        default=None,
        alias='subPath',
        description='SubPath allows an artifact to be sourced from a subpath within the specified source',
        title='Subpath',
    )


class PipelineTaskParameter(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        ..., description='The name of the Task Parameter', title='Parameter Name'
    )
    value: Optional[str] = Field(
        default=None,
        description='Default value to use for an input/output parameter if a value was not supplied as Arguments',
        title='Parameter Value',
    )
    configmap_ref: Optional[ConfigmapParameterRef] = Field(
        default=None,
        alias='configmapRef',
        description='ConfigMapRef is the name of the configmap that contains the parameter value',
        title='Value from ConfigMap Reference',
    )
    step_ref: Optional[StepRef] = Field(
        default=None,
        alias='stepRef',
        description='stepRef is the name of a previous step that produces the parameter',
    )


class PipelineTriggers(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cron: Optional[PipelineCronTrigger] = Field(
        default=None, description='Cron expression for triggering the pipeline'
    )
    pipeline_phase: Optional[list[PipelinePhaseEventSource]] = Field(
        default=None,
        alias='pipelinePhase',
        description='Trigger this pipeline when other pipeline phase from same project is reached',
        title='Pipelinephase',
    )


class ProjectedVolumeMount(BaseModel):
    """
    Represents a projected volume mount that lasts the lifetime of a pod.
    """

    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        ...,
        description='The name of the projected mounted volume.',
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Volume Name',
    )
    configmap_ref: Optional[ConfigMapRefMounted] = Field(
        default=None,
        alias='configmapRef',
        description='Reference to a ConfigMap name and keys to mount in the container',
    )
    secret_ref: Optional[SecretRefMounted] = Field(
        default=None,
        alias='secretRef',
        description='Reference to a Secret name and keys to mount in the container',
    )
    user_secret_ref: Optional[SecretRefMounted] = Field(
        default=None,
        alias='userSecretRef',
        description='Reference to a User Secret name and keys to mount in the container',
    )


class StageStatusSpec(BaseModel):
    build_status: Optional[list[StageBuildStatus]] = Field(
        default=None,
        alias='buildStatus',
        description='List of Image Builds built and deployed with this stage (read-only).',
        title='Stage Builds',
    )
    sync_status: StageSyncStatus = Field(
        ...,
        alias='syncStatus',
        description='Current Sync information about this deployment Stage',
        title='Stage Sync Status',
    )


class TaskInputs(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    parameters: list[TaskParameter] = Field(
        default=[],
        description='Input parameters a Task expect as Arguments',
        title='Task Input Parameters',
    )
    artifacts: list[Artifact] = Field(
        default=[],
        description='Input artifacts a Task expect as Arguments',
        title='Task Input Artifacts',
    )


class TaskOutputs(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    parameters: list[TaskParameter] = Field(
        default=[],
        description='Output parameters a Task expect as Arguments',
        title='Task Output Parameters',
    )
    artifacts: list[Artifact] = Field(
        default=[],
        description='Output artifacts a Task expect as Arguments',
        title='Task Output Artifacts',
    )


class Volume(BaseModel):
    """
    Volume represents a named volume in a container.
    """

    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(..., description="Volume's name", title='Name')
    empty_dir: Optional[EmptyDirVolumeSource] = Field(
        default=None,
        alias='emptyDir',
        description="emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
    )
    path: Optional[str] = Field(
        default=None,
        description="Path in the container where the volume should be mounted. Must not contain ':'",
        title='Path',
    )


class ContainerBaseSpec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        default='dpm-container',
        description='The container name',
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Container Name',
    )
    description: Optional[str] = Field(default=None, title='Resource Description')
    resources: Optional[ResourceRequests] = Field(
        default=None,
        description='The machine (CPU, memory, disk) resource-requirements, if not provided a system default or parent resource attribute will be applied',
        title='Container Resources',
    )
    env: Optional[list[EnvVarValue]] = Field(
        default=None, title='Container Environment Variables'
    )
    mounts: Optional[list[ProjectedVolumeMount]] = Field(
        default=None,
        description='List of existing ConfigMaps or Secrets references to mount in the container',
        title='Container Mounts',
    )


class ContainerImageSpec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: Optional[DockerImageURL] = Field(
        default=None, description='A Public Image Repository URL', title='Public Image'
    )
    description: Optional[str] = Field(default=None, title='Resource Description')
    resources: Optional[ResourceRequests] = Field(
        default=None,
        description='The machine (CPU, memory, disk) resource-requirements, if not provided a system default or parent resource attribute will be applied',
        title='Container Resources',
    )
    env: Optional[list[EnvVarValue]] = Field(
        default=None, title='Container Environment Variables'
    )
    mounts: Optional[list[ProjectedVolumeMount]] = Field(
        default=None,
        description='List of existing ConfigMaps or Secrets references to mount in the container',
        title='Container Mounts',
    )
    image_ref: Optional[ImageRef] = Field(
        default=None,
        alias='imageRef',
        description='Image repository from the list of defined Project images to run the container',
        title='Image Repository Reference',
    )
    build_ref: Optional[BuildRef] = Field(
        default=None,
        alias='buildRef',
        description='The build reference from the list of Project builds',
        title='Image Build reference',
    )


class PipelineTaskArguments(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    artifacts: Optional[list[PipelineTaskArtifact]] = Field(
        default=None,
        description='Artifacts declares the artifacts that a step produces',
        title='Artifacts',
    )
    parameters: Optional[list[PipelineTaskParameter]] = Field(
        default=None,
        description='Parameters declares the parameters that a step produces',
        title='Parameters',
    )


class BuildSpec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        default='default',
        description='The build name',
        max_length=32,
        title='Build Name',
    )
    description: Optional[str] = Field(default=None, title='Resource Description')
    resources: Optional[ResourceRequests] = Field(
        default=None,
        description='The machine (CPU, memory, disk) resource-requirements, if not provided a system default or parent resource attribute will be applied',
        title='Container Resources',
    )
    env: Optional[list[EnvVarValue]] = Field(
        default=None, title='Container Environment Variables'
    )
    mounts: Optional[list[ProjectedVolumeMount]] = Field(
        default=None,
        description='List of existing ConfigMaps or Secrets references to mount in the container',
        title='Container Mounts',
    )
    source_ref: Optional[Union[SourceRef, SourceRefParams]] = Field(
        default=None,
        alias='sourceRef',
        description='The source repository reference from the list of connected repositories',
        title='Source repository reference',
    )
    base_image: Optional[DockerImageURL] = Field(
        default=None,
        alias='baseImage',
        description='        The build base-image, can be any public image, for private base images see imageRef field',
        title='Base Image',
    )
    image_ref: Optional[ImageRef] = Field(
        default=None,
        alias='imageRef',
        description='Image repository from the list of defined Project images to use as the base-image for this build',
        title='Image Repository Reference',
    )
    credentials: Optional[BuildCredentials] = Field(
        default=None,
        description='The build credentials to be used for private base-image',
        title='Build Credentials',
    )
    build_ref: Optional[BuildRef] = Field(
        default=None,
        alias='buildRef',
        description='        The build reference name from the list of Build resources, to be used as the base-image for this build, cannot be used with baseImage field.        ',
        title='Build Reference',
    )
    build_command: Optional[str] = Field(
        default=None,
        alias='buildCommand',
        description='        The build command to be executed on the base-image, for multiple commands,        use a script file using a relative path from the source repository root and execute the script        in this field.        ',
        title='Build Command',
    )
    test_command: Optional[str] = Field(
        default=None,
        alias='testCommand',
        description='        The test command to be executed at the end of this image build, for mltiple commands,        use a script file using a relative path from the source repository root and execute the script        in this field.        ',
        title='Test Command',
    )
    dockerfile: Optional[Union[Path, str]] = Field(
        default=None,
        description='        The Dockerfile path relative to source-code root, to be executed on the base-image,         Cannot be provided with baseImage or buildCommand.        ',
        title='Build Dockerfile',
    )
    event_sensor_container: Optional[ContainerBaseSpec] = Field(
        default=None,
        alias='eventSensorContainer',
        description='The event sensor (pipelinePhase) container to be used for build events',
        title='Event Sensor Container',
    )


class ContainerCommandRequiredSpec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        default='dpm-container',
        description='The container name',
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Container Name',
    )
    description: Optional[str] = Field(default=None, title='Resource Description')
    resources: Optional[ResourceRequests] = Field(
        default=None,
        description='The machine (CPU, memory, disk) resource-requirements, if not provided a system default or parent resource attribute will be applied',
        title='Container Resources',
    )
    env: Optional[list[EnvVarValue]] = Field(
        default=None, title='Container Environment Variables'
    )
    mounts: Optional[list[ProjectedVolumeMount]] = Field(
        default=None,
        description='List of existing ConfigMaps or Secrets references to mount in the container',
        title='Container Mounts',
    )
    image: Optional[Union[DockerImageURL, ContainerImageSpec]] = Field(
        default=None, description='A Public Image Repository URL', title='Public Image'
    )
    image_ref: Optional[ImageRef] = Field(
        default=None,
        alias='imageRef',
        description='Image repository from the list of defined Project images to run the container',
        title='Image Repository Reference',
    )
    build_ref: Optional[BuildRef] = Field(
        default=None,
        alias='buildRef',
        description='The build reference from the list of Project builds',
        title='Image Build reference',
    )
    sidecars: Optional[list[ContainerCommandRequiredSpec]] = Field(
        default=None,
        description='List of arbitrary sidecar containers to start with the main container',
        title='Sidecar Containers',
    )
    volumes: Optional[list[Volume]] = Field(
        default=None,
        description='Volumes is a list of volumes that can be mounted in Tasks.',
        title='Volumes',
    )
    command: str = Field(
        ...,
        description='The container command to be executed, accepts environment variables with sintax $(VAR_NAME)',
        title='Container Command',
    )


class PhaseHook(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        ...,
        description='Name is the name of the task',
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Resource Name',
    )
    arguments: Optional[PipelineTaskArguments] = Field(
        default=None,
        description='Arguments are the parameters and artifacts arguments passed to the task.',
    )
    task_ref: Optional[TaskRef] = Field(
        default=None,
        alias='taskRef',
        description='TaskRef is the name of the task to execute',
        title='Taskref',
    )
    pipeline_ref: Optional[PipelineRef] = Field(
        default=None,
        alias='pipelineRef',
        description='PipelineRef is the name of the pipeline to execute',
        title='Pipelineref',
    )
    phases: list[Phase] = Field(
        ...,
        description='Pipeline or Task status phase which the hook is executed.',
        title='Phases',
    )


class PipelineDAGTask(BaseModel):
    """
    DAGTask represents a node in the graph during DAG execution
    """

    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        ...,
        description='Name is the name of the task',
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Resource Name',
    )
    arguments: Optional[PipelineTaskArguments] = Field(
        default=None,
        description='Arguments are the parameters and artifacts arguments passed to the task.',
    )
    task_ref: Optional[TaskRef] = Field(
        default=None,
        alias='taskRef',
        description='TaskRef is the name of the task to execute',
        title='Taskref',
    )
    pipeline_ref: Optional[PipelineRef] = Field(
        default=None,
        alias='pipelineRef',
        description='PipelineRef is the name of the pipeline to execute',
        title='Pipelineref',
    )
    continue_on: Optional[ContinueOn] = Field(
        default=None,
        alias='continueOn',
        description='ContinueOn allows to proceed with the following step even if this step fails. Errors and Failed states can be specified',
    )
    hooks: Optional[list[PhaseHook]] = Field(
        default=None,
        description='Hooks are a list of status PhaseHooks for this step, overrides pipeline defaults.',
        title='Hooks',
    )
    dependencies: list[Union[str, InterCycleDependency]] = Field(
        default=[],
        description='Dependencies are names of previous PipelineDagTasks which this depends on, InterCycleDependencies is only used with CyclicDAG',
        title='Dependencies',
    )


class PipelineDefaults(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: Optional[str] = Field(
        default=None, description='name has no effect here', title='Container Name'
    )
    description: Optional[str] = Field(default=None, title='Resource Description')
    resources: Optional[ResourceRequests] = Field(
        default=None,
        description='The machine (CPU, memory, disk) resource-requirements, if not provided a system default or parent resource attribute will be applied',
        title='Container Resources',
    )
    env: Optional[list[EnvVarValue]] = Field(
        default=None, title='Container Environment Variables'
    )
    mounts: Optional[list[ProjectedVolumeMount]] = Field(
        default=None,
        description='List of existing ConfigMaps or Secrets references to mount in the container',
        title='Container Mounts',
    )
    image: Optional[str] = Field(
        default=None,
        description='Image is the container image to run. If the image is a public image, it is resolved using the public image repository. If the image is a private image, it is resolved using the private image repository.',
        title='Container Image',
    )
    image_ref: Optional[ImageRef] = Field(
        default=None,
        alias='imageRef',
        description='Image repository from the list of defined Project images to run the container',
        title='Image Repository Reference',
    )
    build_ref: Optional[BuildRef] = Field(
        default=None,
        alias='buildRef',
        description='The build reference from the list of Project builds',
        title='Image Build reference',
    )
    sidecars: Optional[list[ContainerCommandRequiredSpec]] = Field(
        default=None,
        description='List of arbitrary sidecar containers to start with the main container',
        title='Sidecar Containers',
    )
    volumes: Optional[list[Volume]] = Field(
        default=None,
        description='Volumes is a list of volumes that can be mounted in Tasks.',
        title='Volumes',
    )
    command: Optional[str] = Field(
        default=None,
        description='The container command to be executed, accepts environment variables with sintax $(VAR_NAME)',
        title='Container Command',
    )
    inputs: Optional[TaskInputs] = Field(
        default=None,
        description='Inputs describe what inputs parameters and artifacts are supplied to this template',
    )
    outputs: Optional[TaskOutputs] = Field(
        default=None,
        description='Outputs describe the parameters and artifacts that this template produces',
    )
    parallelism: Optional[int] = Field(
        default=None,
        description='Parallelism limits the max total parallel pods that can execute at the same time within the boundaries of this template invocation. If additional steps/dag templates are invoked, the pods created by those templates will not be counted towards this total.',
        title='Parallelism',
    )
    retry_strategy: Optional[RetryStrategy] = Field(
        default=None,
        alias='retryStrategy',
        description='RetryStrategy describes how to retry a template when it fails',
    )
    active_deadline_seconds: Optional[int] = Field(
        default=None,
        alias='activeDeadlineSeconds',
        description="Optional duration in seconds relative to the time the Task attempts to start running, this time includes the time it Task's container to spinup, such as pulling an image.",
        title='Activedeadlineseconds',
    )
    timeout: Optional[str] = Field(
        default=None,
        description="Timeout allows to set the total node execution timeout duration counting from the Task's start time. This duration also includes time in which the node spends in Pending state.",
        title='Timeout',
    )
    hooks: Optional[list[PhaseHook]] = Field(
        default=None,
        description='Hooks are a list of lifecycle hooks for all the steps, is overriden when also defined in Step or DAG step hooks',
        title='Hooks',
    )


class PipelineOverlay(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    arguments: Optional[PipelineArguments] = Field(
        default=None,
        description='Arguments are the parameter and artifact arguments to the template',
    )
    triggers: Optional[PipelineTriggers] = Field(
        default=None, title='Pipeline Triggers'
    )
    defaults: Optional[PipelineDefaults] = Field(
        default=None,
        description='Default values for pipeline tasks',
        title='Pipeline Defaults',
    )


class PipelineRefParams(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        ...,
        description='The name of the Pipeline to be added to stage',
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Resource Name',
    )
    overlay: Optional[PipelineOverlay] = Field(
        default=None,
        description='Overlay is the pipeline overlay to apply to the referenced pipeline',
    )


class PipelineStepTask(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        ...,
        description='Name is the name of the task',
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Resource Name',
    )
    arguments: Optional[PipelineTaskArguments] = Field(
        default=None,
        description='Arguments are the parameters and artifacts arguments passed to the task.',
    )
    task_ref: Optional[TaskRef] = Field(
        default=None,
        alias='taskRef',
        description='TaskRef is the name of the task to execute',
        title='Taskref',
    )
    pipeline_ref: Optional[PipelineRef] = Field(
        default=None,
        alias='pipelineRef',
        description='PipelineRef is the name of the pipeline to execute',
        title='Pipelineref',
    )
    continue_on: Optional[ContinueOn] = Field(
        default=None,
        alias='continueOn',
        description='ContinueOn allows to proceed with the following step even if this step fails. Errors and Failed states can be specified',
    )
    hooks: Optional[list[PhaseHook]] = Field(
        default=None,
        description='Hooks are a list of status PhaseHooks for this step, overrides pipeline defaults.',
        title='Hooks',
    )


class ServiceOverlay(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        default='dpm-container',
        description='The container name',
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Container Name',
    )
    description: Optional[str] = Field(default=None, title='Resource Description')
    resources: Optional[ResourceRequests] = Field(
        default=None,
        description='The machine (CPU, memory, disk) resource-requirements, if not provided a system default or parent resource attribute will be applied',
        title='Container Resources',
    )
    env: Optional[list[EnvVarValue]] = Field(
        default=None, title='Container Environment Variables'
    )
    mounts: Optional[list[ProjectedVolumeMount]] = Field(
        default=None,
        description='List of existing ConfigMaps or Secrets references to mount in the container',
        title='Container Mounts',
    )
    image: Optional[Union[DockerImageURL, ContainerImageSpec]] = Field(
        default=None, description='A Public Image Repository URL', title='Public Image'
    )
    image_ref: Optional[ImageRef] = Field(
        default=None,
        alias='imageRef',
        description='Image repository from the list of defined Project images to run the container',
        title='Image Repository Reference',
    )
    build_ref: Optional[BuildRef] = Field(
        default=None,
        alias='buildRef',
        description='The build reference from the list of Project builds',
        title='Image Build reference',
    )
    sidecars: Optional[list[ContainerCommandRequiredSpec]] = Field(
        default=None,
        description='List of arbitrary sidecar containers to start with the main container',
        title='Sidecar Containers',
    )
    volumes: Optional[list[Volume]] = Field(
        default=None,
        description='Volumes is a list of volumes that can be mounted in Tasks.',
        title='Volumes',
    )
    command: Optional[str] = Field(
        default=None,
        description='The container command to be executed, accepts environment variables with sintax $(VAR_NAME)',
        title='Container Command',
    )
    route: Optional[ServiceRouteSpec] = Field(
        default=None, description="The Service's Route", title='Service Route'
    )
    scale_to_zero: Optional[bool] = Field(
        default=None,
        alias='scaleToZero',
        description='Scale the Service to Zero when there are no requests',
        title='Scale to Zero',
    )


class ServiceRefParams(BaseModel):
    name: str = Field(
        ...,
        description='The Service reference name from the list of Service resources',
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Service Reference',
    )
    overlay: Optional[ServiceOverlay] = Field(
        default=None,
        description='The Service overlay to apply to the referenced Service',
        title='Service Overlay',
    )


class ServiceSpec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        default='dpm-container',
        description='The container name',
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Container Name',
    )
    description: Optional[str] = Field(default=None, title='Resource Description')
    resources: Optional[ResourceRequests] = Field(
        default=None,
        description='The machine (CPU, memory, disk) resource-requirements, if not provided a system default or parent resource attribute will be applied',
        title='Container Resources',
    )
    env: Optional[list[EnvVarValue]] = Field(
        default=None, title='Container Environment Variables'
    )
    mounts: Optional[list[ProjectedVolumeMount]] = Field(
        default=None,
        description='List of existing ConfigMaps or Secrets references to mount in the container',
        title='Container Mounts',
    )
    image: Optional[Union[DockerImageURL, ContainerImageSpec]] = Field(
        default=None, description='A Public Image Repository URL', title='Public Image'
    )
    image_ref: Optional[ImageRef] = Field(
        default=None,
        alias='imageRef',
        description='Image repository from the list of defined Project images to run the container',
        title='Image Repository Reference',
    )
    build_ref: Optional[BuildRef] = Field(
        default=None,
        alias='buildRef',
        description='The build reference from the list of Project builds',
        title='Image Build reference',
    )
    sidecars: Optional[list[ContainerCommandRequiredSpec]] = Field(
        default=None,
        description='List of arbitrary sidecar containers to start with the main container',
        title='Sidecar Containers',
    )
    volumes: Optional[list[Volume]] = Field(
        default=None,
        description='Volumes is a list of volumes that can be mounted in Tasks.',
        title='Volumes',
    )
    command: str = Field(
        ...,
        description='The container command to be executed, accepts environment variables with sintax $(VAR_NAME)',
        title='Container Command',
    )
    service_port: int = Field(
        default=80,
        alias='servicePort',
        description='The ServicePort',
        ge=0,
        le=65535,
        title='Service Port',
    )
    health_check: ServiceHealthCheck = Field(
        ...,
        alias='healthCheck',
        description='The Service Health Check parameters',
        title='Service Health Check',
    )
    route: ServiceRouteSpec = Field(
        default_factory=lambda: ServiceRouteSpec.model_validate(
            {
                'displayName': None,
                'description': None,
                'publishApp': False,
                'customDomains': [],
                'openAccess': False,
            }
        ),
        description="The Service's Route",
        title='Service Route',
    )
    scale_to_zero: bool = Field(
        default=True,
        alias='scaleToZero',
        description='Scale the Service to Zero when there are no requests',
        title='Scale to Zero',
    )


class TaskOverlay(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        default='dpm-container',
        description='The container name',
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Container Name',
    )
    description: Optional[str] = Field(default=None, title='Resource Description')
    resources: Optional[ResourceRequests] = Field(
        default=None,
        description='The machine (CPU, memory, disk) resource-requirements, if not provided a system default or parent resource attribute will be applied',
        title='Container Resources',
    )
    env: Optional[list[EnvVarValue]] = Field(
        default=None, title='Container Environment Variables'
    )
    mounts: Optional[list[ProjectedVolumeMount]] = Field(
        default=None,
        description='List of existing ConfigMaps or Secrets references to mount in the container',
        title='Container Mounts',
    )
    image: Optional[Union[DockerImageURL, ContainerImageSpec]] = Field(
        default=None, description='A Public Image Repository URL', title='Public Image'
    )
    image_ref: Optional[ImageRef] = Field(
        default=None,
        alias='imageRef',
        description='Image repository from the list of defined Project images to run the container',
        title='Image Repository Reference',
    )
    build_ref: Optional[BuildRef] = Field(
        default=None,
        alias='buildRef',
        description='The build reference from the list of Project builds',
        title='Image Build reference',
    )
    sidecars: Optional[list[ContainerCommandRequiredSpec]] = Field(
        default=None,
        description='List of arbitrary sidecar containers to start with the main container',
        title='Sidecar Containers',
    )
    volumes: Optional[list[Volume]] = Field(
        default=None,
        description='Volumes is a list of volumes that can be mounted in Tasks.',
        title='Volumes',
    )
    command: Optional[str] = Field(
        default=None,
        description='The container command to be executed, accepts environment variables with sintax $(VAR_NAME)',
        title='Container Command',
    )


class TaskRefParams(BaseModel):
    name: str = Field(
        ...,
        description='The Task reference name from the list of Task resources',
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Task Reference',
    )
    overlay: Optional[TaskOverlay] = Field(
        default=None,
        description='The Task overlay to apply to the referenced Task',
        title='Task Overlay',
    )


class TaskSpec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        ...,
        description='A unique name for the Task within the Pipeline',
        title='Task Name',
    )
    description: Optional[str] = Field(default=None, title='Resource Description')
    resources: Optional[ResourceRequests] = Field(
        default=None,
        description='The machine (CPU, memory, disk) resource-requirements, if not provided a system default or parent resource attribute will be applied',
        title='Container Resources',
    )
    env: Optional[list[EnvVarValue]] = Field(
        default=None, title='Container Environment Variables'
    )
    mounts: Optional[list[ProjectedVolumeMount]] = Field(
        default=None,
        description='List of existing ConfigMaps or Secrets references to mount in the container',
        title='Container Mounts',
    )
    image: Optional[Union[DockerImageURL, ContainerImageSpec]] = Field(
        default=None, description='A Public Image Repository URL', title='Public Image'
    )
    image_ref: Optional[ImageRef] = Field(
        default=None,
        alias='imageRef',
        description='Image repository from the list of defined Project images to run the container',
        title='Image Repository Reference',
    )
    build_ref: Optional[BuildRef] = Field(
        default=None,
        alias='buildRef',
        description='The build reference from the list of Project builds',
        title='Image Build reference',
    )
    sidecars: Optional[list[ContainerCommandRequiredSpec]] = Field(
        default=None,
        description='List of arbitrary sidecar containers to start with the main container',
        title='Sidecar Containers',
    )
    volumes: Optional[list[Volume]] = Field(
        default=None,
        description='Volumes is a list of volumes that can be mounted in Tasks.',
        title='Volumes',
    )
    command: str = Field(
        ...,
        description='The container command to be executed, accepts environment variables with sintax $(VAR_NAME)',
        title='Container Command',
    )
    inputs: Optional[TaskInputs] = Field(
        default=None,
        description='Inputs describe what inputs parameters and artifacts are supplied to this template',
    )
    outputs: Optional[TaskOutputs] = Field(
        default=None,
        description='Outputs describe the parameters and artifacts that this template produces',
    )
    parallelism: Optional[int] = Field(
        default=None,
        description='Parallelism limits the max total parallel pods that can execute at the same time within the boundaries of this template invocation. If additional steps/dag templates are invoked, the pods created by those templates will not be counted towards this total.',
        title='Parallelism',
    )
    retry_strategy: Optional[RetryStrategy] = Field(
        default=None,
        alias='retryStrategy',
        description='RetryStrategy describes how to retry a template when it fails',
    )
    active_deadline_seconds: Optional[int] = Field(
        default=None,
        alias='activeDeadlineSeconds',
        description="Optional duration in seconds relative to the time the Task attempts to start running, this time includes the time it Task's container to spinup, such as pulling an image.",
        title='Activedeadlineseconds',
    )
    timeout: Optional[str] = Field(
        default=None,
        description="Timeout allows to set the total node execution timeout duration counting from the Task's start time. This duration also includes time in which the node spends in Pending state.",
        title='Timeout',
    )


class CyclicDag(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    start_cycle: AwareDatetime = Field(
        ...,
        alias='startCycle',
        description='The start cycle in UTC of the DAG as an iso8601 string i.e. YYYY-MM-DDTHH:MM:SSZ',
        title='Startcycle',
    )
    end_cycle: AwareDatetime = Field(
        ...,
        alias='endCycle',
        description='The end cycle in UTC of the DAG as an iso8601 string i.e. YYYY-MM-DDTHH:MM:SSZ',
        title='Endcycle',
    )
    frequency: Optional[Frequency] = Field(
        default=None,
        description='The frequency occurrence of each DAG cycle, e.g. @hourly, @daily, @weekly, @monthly, @yearly',
        title='Frequency',
    )
    interval: int = Field(
        default=1,
        description='The frequency interval multiplier between each DAG cycle',
        gt=0,
        title='Interval',
    )
    parallel_chunks: int = Field(
        default=1,
        alias='parallelChunks',
        description='The number of concurrent chunks to run in parallel. Defaults to 1. A concurrent chunk will ignore dependencies from previous chunks',
        gt=0,
        title='Parallelchunks',
    )
    dag: list[PipelineDAGTask] = Field(
        ..., description='List of arbitrary pipeline tasks', title='Dag'
    )


class PipelineParallelSteps(RootModel[list[PipelineStepTask]]):
    root: list[PipelineStepTask] = Field(..., title='PipelineParallelSteps')


class PipelineSpec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        ...,
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Resource Name',
    )
    description: Optional[str] = Field(default=None, title='Resource Description')
    arguments: Optional[PipelineArguments] = Field(
        default=None,
        description='Arguments are the parameter and artifact arguments to the template',
    )
    triggers: Optional[PipelineTriggers] = Field(
        default=None, title='Pipeline Triggers'
    )
    defaults: Optional[PipelineDefaults] = Field(
        default=None,
        description='Default values for pipeline tasks',
        title='Pipeline Defaults',
    )
    dag: Optional[list[PipelineDAGTask]] = Field(
        default=None,
        description='List of arbitrary pipeline tasks',
        title='Pipeline Tasks',
    )
    cyclic_dag: Optional[CyclicDag] = Field(
        default=None,
        alias='cyclicDag',
        description='CyclicDag is a DAG that repeats on a schedule',
    )
    fail_fast: bool = Field(
        default=True,
        alias='failFast',
        description='Only for DAGs, failFast will stop the execution of the pipeline if any node fails. Set to false to allow DAG to continue execution even if a any of the node fails. Steps always fail fast unless continueOn is set',
        title='Failfast',
    )
    hooks: Optional[list[PhaseHook]] = Field(
        default=None,
        description='Hooks are a list of lifecycle hooks for all the steps, is overriden when also defined in Step or DAG step hooks',
        title='Hooks',
    )
    steps: Optional[list[PipelineParallelSteps]] = Field(
        default=None,
        description='Steps define a series of sequential/parallel workflow steps',
        title='Steps',
    )
    volumes: Optional[list[PipelineVolume]] = Field(
        default=None,
        description='Volumes is a list of volumes that can be mounted by containers in a template',
        title='Volumes',
    )


class StageResourcesSpec(BaseModel):
    pipelines: Optional[list[Union[Pipelines, PipelineRefParams]]] = Field(
        default=None,
        description='Pipelines to be deployed in this deployment stage',
        title='Stage Pipelines',
    )
    tasks: Optional[list[Union[Tasks, TaskRefParams]]] = Field(
        default=None,
        description='List of standalone Tasks to be executed in this deployment stage',
        title='Stage Tasks',
    )
    services: Optional[list[Union[Services, ServiceRefParams]]] = Field(
        default=None,
        description='List of Services to be deployed in this deployment stage',
        title='Stage Services',
    )


class StageSpec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        ...,
        description='The name of the deployment stage',
        max_length=12,
        min_length=1,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Stage Name',
    )
    description: Optional[str] = Field(default=None, title='Resource Description')
    active: Optional[bool] = Field(
        default=True,
        description='Whether this stage is active or not',
        title='Stage Active',
    )
    resources: Optional[StageResourcesSpec] = Field(
        default=None,
        description='Resources to be deployed in this deployment stage',
        title='Stage Resources',
    )
    track: Optional[StageTrackSpec] = Field(
        default=None,
        description='Source repository tracking information for this deployment stage',
        title='Stage Tracking',
    )
    status: Optional[StageStatusSpec] = Field(
        default=None,
        description='Current Sync information about this deployment Stage (read-only)',
        title='Stage Status',
    )


class ProjectResourcesSpec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    configmaps: list[ConfigMapSpec] = Field(
        default=[], description='List of project configmaps', title='Project ConfigMaps'
    )
    secrets: list[SecretSpec] = Field(
        default=[], description='List of project secrets', title='Project Secrets'
    )
    images: list[ImageSpec] = Field(
        default=[], description='List of project images', title='Project Images'
    )
    sources: list[SourceRepositorySpec] = Field(
        default=[],
        description='List of project source repositories',
        title='Project Sources',
    )
    builds: list[BuildSpec] = Field(
        default=[], description='List of project builds', title='Project Builds'
    )
    tasks: list[TaskSpec] = Field(
        default=[], description='List of project tasks', title='Project Tasks'
    )
    pipelines: list[PipelineSpec] = Field(
        default=[], description='List of project pipelines', title='Project Pipelines'
    )
    services: list[ServiceSpec] = Field(
        default=[], description='List of project services', title='Project Services'
    )
    stages: list[StageSpec] = Field(
        default=[],
        description='List of project deployment stages',
        title='Project Stages',
    )


class ProjectSpec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        ...,
        max_length=32,
        min_length=3,
        pattern='^[a-z]([a-z0-9-]+[a-z0-9])?$',
        title='Resource Name',
    )
    description: Optional[str] = Field(default=None, title='Resource Description')
    version: str = Field(
        default='v1',
        description='The Project Specification version',
        title='Project Spec Version',
    )
    user_ref: Optional[UserRef] = Field(
        default=None,
        alias='userRef',
        description='The Organization normalized name for the project to be deployed as',
        title='Project User Reference',
    )
    member_ref: Optional[EmailStr] = Field(
        default=None,
        alias='memberRef',
        description='The Organization Member email, owner of the project.',
        title='Project User Member Reference',
    )
    active: bool = Field(
        default=True,
        description='Whether this project is active to be deployed or not',
        title='Project Active',
    )
    resources: Optional[ProjectResourcesSpec] = Field(
        default=None, title='Project Resources'
    )


class SpecRevisionSchema(BaseModel):
    spec: ProjectSpec
    author: str = Field(..., title='Author')
    id: Optional[int] = Field(default=None, title='ID')
    created_at: AwareDatetime = Field(..., title='Created At')
    number: int = Field(default=0, title='Number')
    status: str = Field(default='created', max_length=20, title='Status')
    uuid: Optional[UUID] = Field(default=None, title='Uuid')


class ProjectSchema(BaseModel):
    last_revision: Optional[SpecRevisionSchema] = None
    routes: list[RouteSchema] = Field(..., title='Routes')
    stages: list[StageSchema] = Field(..., title='Stages')
    builds: list[BuildSchema] = Field(..., title='Builds')
    owner: str = Field(..., title='Owner')
    org: str = Field(..., title='Org')
    name: str = Field(..., max_length=255, title='Name')
    description: Optional[str] = Field(
        default=None,
        description='A description of the project, auto-generated from the spec',
        title='Description',
    )
    created_at: AwareDatetime = Field(..., title='Created At')
    status: str = Field(default='created', max_length=20, title='Status')


ContainerCommandRequiredSpec.model_rebuild()
